{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["module","exports","checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","buttonType","clicked","onCheckoutCancelled","onCheckoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","street","zipCode","minlength","maxlength","country","deliveryMethod","options","displayName","formIsValid","orderHandler","event","preventDefault","orderData","key","order","price","totalPrice","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","this","push","id","config","loading","Spinner","onSubmit","map","formElement","Input","changed","shouldValidate","invalid","disabled","Component","connect","burgerBuilder","orders","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","purchased","path","match","component","to"],"mappings":"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","file":"static/js/3.174d9a24.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2bGZ1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__27AyY\"};","import React from \"react\";\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport classes from \"./CheckoutSummary.module.css\";\r\n\r\nconst checkoutSummary = (props) => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>We hope it tastes well!</h1>\r\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n        <Burger ingredients={props.ingredients} />\r\n        <Button buttonType=\"Danger\" clicked={props.onCheckoutCancelled}>\r\n          CANCEL\r\n        </Button>\r\n        <Button buttonType=\"Success\" clicked={props.onCheckoutContinued}>\r\n          Continue\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default checkoutSummary;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport { connect } from \"react-redux\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport { updateObject, checkValidity } from \"../../../utility/utility\";\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Name\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"E-mail\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      zipCode: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"number\",\r\n          placeholder: \"Zip Code\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minlength: 5,\r\n          maxlength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementType: \"input\",\r\n        type: \"text\",\r\n        elementConfig: {\r\n          placeholder: \"Country\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        type: \"text\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"Standard\", displayName: \"Standard\" },\r\n            { value: \"Express\", displayName: \"Express\" },\r\n            { value: \"Lightning\", displayName: \"Lightning\" },\r\n          ],\r\n        },\r\n        value: \"Standard\",\r\n        valid: true,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n  };\r\n\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const orderData = {};\r\n    for (let key in this.state.orderForm) {\r\n      orderData[key] = this.state.orderForm[key].value;\r\n    }\r\n\r\n    const order = {\r\n      ingredients: this.props.ingredients,\r\n      price: this.props.totalPrice,\r\n      orderData: orderData,\r\n      userId: this.props.userId,\r\n    };\r\n\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(\r\n      this.state.orderForm[inputIdentifier],\r\n      {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.orderForm[inputIdentifier].validation\r\n        ),\r\n        touched: true,\r\n      }\r\n    );\r\n    const updatedOrderForm = updateObject(this.state.orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let key in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[key].valid && formIsValid;\r\n    }\r\n    this.setState({\r\n      orderForm: updatedOrderForm,\r\n      formIsValid: formIsValid,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h3>Enter Your Contact Data</h3>\r\n        {this.props.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <form onSubmit={this.orderHandler}>\r\n            {formElementsArray.map((formElement) => (\r\n              <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                changed={(event) =>\r\n                  this.inputChangedHandler(event, formElement.id)\r\n                }\r\n                shouldValidate={formElement.config.validation ? true : false}\r\n                invalid={!formElement.config.valid}\r\n                touched={formElement.config.touched}\r\n              />\r\n            ))}\r\n            <Button\r\n              buttonType=\"Success\"\r\n              clicked={this.orderHandler}\r\n              disabled={!this.state.formIsValid}\r\n            >\r\n              ORDER\r\n            </Button>\r\n          </form>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingredients: state.burgerBuilder.ingredients,\r\n    totalPrice: state.burgerBuilder.totalPrice,\r\n    loading: state.orders.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React, { Component } from \"react\";\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Checkout extends Component {\r\n  checkoutCancelledHandler = () => {\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  checkoutContinuedHandler = () => {\r\n    this.props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  render() {\r\n    return this.props.ingredients && !this.props.purchased ? (\r\n      <div>\r\n        <CheckoutSummary\r\n          ingredients={this.props.ingredients}\r\n          onCheckoutCancelled={this.checkoutCancelledHandler}\r\n          onCheckoutContinued={this.checkoutContinuedHandler}\r\n        />\r\n        <Route\r\n          path={this.props.match.path + \"/contact-data\"}\r\n          component={ContactData}\r\n        />\r\n      </div>\r\n    ) : (\r\n      <Redirect to=\"/\" />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingredients: state.burgerBuilder.ingredients,\r\n    purchased: state.orders.purchased,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}